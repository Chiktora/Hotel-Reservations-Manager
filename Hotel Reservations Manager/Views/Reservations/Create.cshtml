@model Hotel_Reservations_Manager.Data.Models.Reservation

@{
    ViewData["Title"] = "Create Reservation";
}

<h1>Create Reservation</h1>

@if (ViewBag.ErrorDetails != null && ViewBag.ErrorDetails.Count > 0)
{
    <div class="alert alert-danger">
        <h4>Reservation could not be created</h4>
        <p>The following issues were detected:</p>
        <ul>
            @foreach (var detail in ViewBag.ErrorDetails)
            {
                <li>@detail</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-12">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            <div class="form-group">
                <label class="control-label">Room</label>
                <select name="RoomId" id="roomSelect" class="form-control">
                    <option value="">-- Select Room --</option>
                    @if (ViewBag.Rooms != null)
                    {
                        foreach (var room in ViewBag.Rooms)
                        {
                            if (Model?.RoomId == room.Id)
                            {
                                <option value="@room.Id" selected>Room @room.RoomNumber (Capacity: @room.Capacity)</option>
                            }
                            else
                            {
                                <option value="@room.Id">Room @room.RoomNumber (Capacity: @room.Capacity)</option>
                            }
                        }
                    }
                </select>
                <small class="form-text text-muted">Select a room with enough capacity for all clients</small>
                <span asp-validation-for="RoomId" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label class="control-label">Clients</label>
                <div class="input-group mb-3">
                    <input type="text" id="clientSearch" class="form-control" placeholder="Search clients...">
                    <button class="btn btn-outline-secondary" type="button" data-bs-toggle="modal" data-bs-target="#addClientModal">
                        <i class="fas fa-plus"></i> Add New Client
                    </button>
                </div>
                <div id="searchResults" class="list-group mb-3" style="max-height: 200px; overflow-y: auto; display: none;">
                    <!-- Search results will be populated here -->
                </div>
                <select name="clientIds" id="clientsSelect" class="form-control" multiple>
                    @if (ViewBag.Clients != null)
                    {
                        foreach (var client in ViewBag.Clients)
                        {
                            bool isSelected = ViewBag.ClientIds != null && 
                                             ((IEnumerable<SelectListItem>)ViewBag.ClientIds)
                                             .Any(i => i.Selected && i.Value == client.Id.ToString());
                                             
                            if (isSelected)
                            {
                                <option value="@client.Id" selected>@(client.FirstName + " " + client.LastName)</option>
                            }
                            else
                            {
                                <option value="@client.Id">@(client.FirstName + " " + client.LastName)</option>
                            }
                        }
                    }
                </select>
                <small class="form-text text-muted">Selected clients: <span id="selectedCount">0</span></small>
                <span class="text-danger field-validation-error" id="clientValidationMessage"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="CheckInDate" class="control-label">Check-in Date</label>
                <input asp-for="CheckInDate" class="form-control" type="date" />
                <span asp-validation-for="CheckInDate" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="CheckOutDate" class="control-label">Check-out Date</label>
                <input asp-for="CheckOutDate" class="form-control" type="date" />
                <span asp-validation-for="CheckOutDate" class="text-danger"></span>
            </div>
            
            <div class="form-group form-check">
                <input class="form-check-input" asp-for="BreakfastIncluded" />
                <label class="form-check-label" asp-for="BreakfastIncluded">Breakfast Included</label>
            </div>
            
            <div class="form-group form-check">
                <input class="form-check-input" asp-for="AllInclusive" />
                <label class="form-check-label" asp-for="AllInclusive">All Inclusive</label>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" id="submitButton" />
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

<!-- Add Client Modal -->
<div class="modal fade" id="addClientModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Client</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addClientForm">
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="firstName" required>
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="lastName" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phoneNumber" required>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="isAdult" checked>
                        <label class="form-check-label" for="isAdult">Is Adult</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveClientBtn">Save Client</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            let searchTimeout;
            
            // Client search functionality
            $('#clientSearch').on('input', function() {
                clearTimeout(searchTimeout);
                const searchTerm = $(this).val();
                
                if (searchTerm.length >= 3) {
                    searchTimeout = setTimeout(function() {
                        $.get('/Clients/Search', { term: searchTerm }, function(data) {
                            const $searchResults = $('#searchResults');
                            $searchResults.empty();
                            
                            if (data.length > 0) {
                                data.forEach(client => {
                                    const $item = $(`<a href="#" class="list-group-item list-group-item-action">
                                        ${client.firstName} ${client.lastName}
                                        <small class="text-muted">${client.isAdult ? '(Adult)' : '(Child)'}</small>
                                    </a>`);
                                    
                                    $item.click(function(e) {
                                        e.preventDefault();
                                        addClientToSelection(client);
                                        $searchResults.hide();
                                        $('#clientSearch').val('');
                                    });
                                    
                                    $searchResults.append($item);
                                });
                                $searchResults.show();
                            } else {
                                // No results found - add option to create new client
                                const names = searchTerm.trim().split(/\s+/);
                                const $item = $(`<div class="list-group-item">
                                    <p class="mb-1">No clients found with "${searchTerm}"</p>
                                    <button class="btn btn-sm btn-primary create-new-client">
                                        Create New Client
                                    </button>
                                </div>`);
                                
                                $item.find('.create-new-client').click(function(e) {
                                    e.preventDefault();
                                    // Populate the modal with the search term split into names
                                    if (names.length >= 2) {
                                        $('#firstName').val(names[0]);
                                        $('#lastName').val(names.slice(1).join(' '));
                                    } else if (names.length === 1) {
                                        $('#firstName').val(names[0]);
                                        $('#lastName').val('');
                                    }
                                    $('#addClientModal').modal('show');
                                    $searchResults.hide();
                                });
                                
                                $searchResults.append($item);
                                $searchResults.show();
                            }
                        });
                    }, 300);
                } else {
                    $('#searchResults').hide();
                }
            });
            
            // Hide search results when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#clientSearch, #searchResults, .create-new-client').length) {
                    $('#searchResults').hide();
                }
            });
            
            // Add new client functionality
            $('#saveClientBtn').click(function() {
                const clientData = {
                    firstName: $('#firstName').val(),
                    lastName: $('#lastName').val(),
                    email: $('#email').val(),
                    phoneNumber: $('#phoneNumber').val(),
                    isAdult: $('#isAdult').is(':checked')
                };
                
                $.ajax({
                    url: '/Clients/CreateAjax',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(clientData),
                    success: function(response) {
                        if (response.success) {
                            addClientToSelection(response.client);
                            $('#addClientModal').modal('hide');
                            $('#addClientForm')[0].reset();
                            $('#clientSearch').val('');
                            
                            // Show success message
                            const alert = $('<div class="alert alert-success alert-dismissible fade show" role="alert">')
                                .text('Client added successfully!')
                                .append('<button type="button" class="btn-close" data-bs-dismiss="alert"></button>');
                            $('.col-md-12').prepend(alert);
                        } else {
                            // Show error message
                            const alert = $('<div class="alert alert-danger alert-dismissible fade show" role="alert">')
                                .text('Error adding client: ' + response.message)
                                .append('<button type="button" class="btn-close" data-bs-dismiss="alert"></button>');
                            $('.modal-body').prepend(alert);
                        }
                    },
                    error: function() {
                        const alert = $('<div class="alert alert-danger alert-dismissible fade show" role="alert">')
                            .text('Error adding client. Please try again.')
                            .append('<button type="button" class="btn-close" data-bs-dismiss="alert"></button>');
                        $('.modal-body').prepend(alert);
                    }
                });
            });
            
            // Clear modal form when it's closed
            $('#addClientModal').on('hidden.bs.modal', function() {
                $('#addClientForm')[0].reset();
                $('.alert').remove();
            });
            
            function addClientToSelection(client) {
                const $select = $('#clientsSelect');
                const option = new Option(
                    `${client.firstName} ${client.lastName}`,
                    client.id,
                    false,
                    true
                );
                $select.append(option);
                updateSelectedClientCount();
                validateRoomCapacity();
            }
            
            // Update selected count and validate when selection changes
            $('#clientsSelect').on('change', function() {
                updateSelectedClientCount();
                validateRoomCapacity();
            });
            
            // Validate room capacity when room selection changes
            $('#roomSelect').on('change', function() {
                validateRoomCapacity();
            });
            
            // Function to update the selected client count
            function updateSelectedClientCount() {
                var count = $('#clientsSelect option:selected').length;
                $('#selectedCount').text(count);
            }
            
            // Function to validate room capacity against selected clients
            function validateRoomCapacity() {
                var selectedRoom = $('#roomSelect option:selected');
                var roomText = selectedRoom.text();
                var capacityMatch = roomText.match(/Capacity: (\d+)/);
                
                if (capacityMatch && capacityMatch.length > 1) {
                    var capacity = parseInt(capacityMatch[1]);
                    var selectedClients = $('#clientsSelect option:selected').length;
                    
                    if (selectedClients > capacity) {
                        $('#clientValidationMessage').text('Warning: You have selected more clients (' + 
                            selectedClients + ') than the room capacity (' + capacity + ')');
                    } else {
                        $('#clientValidationMessage').text('');
                    }
                }
            }
            
            // Initialize
            updateSelectedClientCount();
        });
    </script>
} 